[{"content":"组策略配置 配置项 路径 设置值 密码永不过期 计算机配置\\Windows 设置\\安全设置\\账户策略\\密码策略\\密码最长使用期限 0 允许未登录直接关机 计算机配置\\Windows 设置\\安全设置\\本地策略\\安全选项\\关机: 允许系统在未登录的情况下关闭 已启用 无须按 Ctrl+Alt+Del 计算机配置\\Windows 设置\\安全设置\\本地策略\\安全选项\\交互式登录：无须按 Ctrl+Alt+Del 已启用 关机不用选择原因 计算机配置\\管理模板\\系统\\显示“关闭事件跟踪程序” 已禁用 开机不显示服务管理器 计算机配置\\管理模板\\系统\\在登录时不显示“管理你的服务器”页 已禁用 ","date":"2025-07-30T13:00:00+08:00","permalink":"https://97xiami.github.io/p/windows-server-2022%E9%85%8D%E7%BD%AE/","title":"Windows Server 2022配置"},{"content":"性能模式 访问http://192.168.0.1，登录后访问http://192.168.0.1/index.html#performance_mode\nadb 调试 访问http://192.168.0.1，登录后访问http://192.168.0.1/index.html#usb_port\n下载Escrcpy 拨号输入*#*#83781#*#*，进入工程模式，切换到DEBUG\u0026amp;LOG，点击Send AT Command，在AT Command输入框中输入命令后点击SEND Channel 的 0 是卡一，1 是卡二 AT+SPIMEI=0 的 0 是卡一，1 是卡二\n1 2 3 查询sim卡签约速率：AT+CGEQOSRDP=1 修改串号：AT+SPIMEI=0,\u0026#34;要修改的IMEI\u0026#34; 查询串号：AT+SPIMEI? ","date":"2025-04-29T10:00:00+08:00","permalink":"https://97xiami.github.io/p/%E4%B8%AD%E5%85%B4u30air/f50%E6%95%99%E7%A8%8B/","title":"中兴U30air/F50教程"},{"content":"从 intel 官网下载驱动，除网卡驱动外直接解压安装 网卡驱动\n显卡驱动\n英特尔 ® 管理引擎 驱动\n芯片组 INF 实用程序\n还剩一个未知设备，硬件 ID：ACPI\\VEN_INT\u0026amp;DEV_34C8，不安装无影响，需要安装自行搜索INT34C8,或者直接用这个驱动\n网卡驱动安装方法 解压驱动，内容如图\nCMD 运行compmgmt.msc打开计算机管理\n找到设备管理器-其他设备，会显示三个带感叹号的以太网控制器\n我这里已经安装了一个,所以只显示两个\n双击其中一个打开\n中间位置会显示PCI插槽4,PCI插槽5和PCI插槽6,分别对应物理接口的ETH0,ETH1和ETH2\nPCI插槽4选择更新驱动程序，选择浏览我的电脑以查找驱动程序，选择让我从计算机的可用驱动列表中选取，选择显示所有设备，选择下一步，选择从磁盘安装，选择浏览，从解压路径找到PRO1000/Winx64/WS2022/e1r.inf打开,然后找到Intel(R) I210 Gigabit Network Connection，选择下一步，会弹出不推荐安装警告，选择是安装\nPCI插槽5和PCI插槽6选择PRO2500/Winx64/WS2022/e2f.inf，然后找到Intel(R) Ethernet Controller (3) I225-LM,选择下一步，会弹出不推荐安装警告，选择是安装\n","date":"2024-12-30T13:00:00+08:00","permalink":"https://97xiami.github.io/p/r86s%E5%AE%89%E8%A3%85windows-server-2022%E7%9A%84%E9%A9%B1%E5%8A%A8/","title":"R86S安装Windows Server 2022的驱动"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 #!/bin/bash # 定义仓库数组 repositories=( # 作者/项目名:版本tag:要下载的文件名正则表达式 \u0026#34;AdguardTeam/AdGuardHome:v0.107.48:AdGuardHome_linux_amd64\\.tar\\.gz$\u0026#34; \u0026#34;VSCodium/vscodium:1.88.1.24104:VSCodiumSetup-x64-[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+\\.exe$\u0026#34; # 在此添加更多仓库 ) # 文件下载位置 download_dir=\u0026#34;/root/downloads\u0026#34; # 检查依赖工具 if ! command -v curl \u0026amp;\u0026gt; /dev/null || ! command -v wget \u0026amp;\u0026gt; /dev/null; then echo \u0026#34;请安装 curl 和 wget 工具。\u0026#34; exit 1 fi # 循环遍历每个仓库并下载 for repo_info in \u0026#34;${repositories[@]}\u0026#34;; do # 添加随机延时 sleep $((RANDOM % 5 + 1)) # 获取仓库信息 IFS=\u0026#39;:\u0026#39; read -ra repo_data \u0026lt;\u0026lt;\u0026lt; \u0026#34;$repo_info\u0026#34; repo_url=\u0026#34;${repo_data[0]}\u0026#34; local_tag=\u0026#34;${repo_data[1]}\u0026#34; filename=\u0026#34;${repo_data[2]}\u0026#34; if [ -z \u0026#34;$local_tag\u0026#34; ]; then echo \u0026#34;未获取到本地版本号\u0026#34; continue fi # 获取GitHub API信息 github_api=$(curl -s \u0026#34;https://api.github.com/repos/$repo_url/releases/latest\u0026#34;) if [ -z \u0026#34;$github_api\u0026#34; ]; then github_api=$(curl -s \u0026#34;https://api.github.com/repos/$repo_url/releases/latest\u0026#34;) if [ -z \u0026#34;$github_api\u0026#34; ]; then echo \u0026#34;无法获取GitHub API信息\u0026#34; continue fi fi # 获取最新版本号 remote_tag=$(echo \u0026#34;$github_api\u0026#34; | grep -o \u0026#39;\u0026#34;tag_name\u0026#34;: \u0026#34;[^\u0026#34;]*\u0026#39; | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4) if [ -z \u0026#34;$remote_tag\u0026#34; ]; then remote_tag=$(echo \u0026#34;$github_api\u0026#34; | awk \u0026#39;/tag_name/{print $4;exit}\u0026#39; FS=\u0026#39;[\u0026#34;\u0026#34;]\u0026#39;) if [ -z \u0026#34;$remote_tag\u0026#34; ]; then echo \u0026#34;未获取到版本号\u0026#34; continue fi fi # 打印本地和最新版本号 echo \u0026#34;最新版本号 for $repo_url: $remote_tag\u0026#34; echo \u0026#34;本地版本号 for $repo_url: $local_tag\u0026#34; if [ \u0026#34;$local_tag\u0026#34; == \u0026#34;$remote_tag\u0026#34; ]; then echo \u0026#34;无更新 for $repo_url\u0026#34; else # 删除旧版本 find $download_dir -type f -regex \u0026#34;$download_dir\\/$filename\u0026#34; -exec rm -f {} \\; # 获取下载链接 download_url=$(echo \u0026#34;$github_api\u0026#34; | grep -o \u0026#39;\u0026#34;browser_download_url\u0026#34;: \u0026#34;https://github.com[^\u0026#34;]*\u0026#39; | cut -d \u0026#39;\u0026#34;\u0026#39; -f 4 | grep -E \u0026#34;$filename\u0026#34;) if [ -z \u0026#34;$download_url\u0026#34; ]; then echo \u0026#34;无法获取下载链接\u0026#34; continue fi filename=$(basename \u0026#34;$download_url\u0026#34;) # 使用curl下载 sleep $((RANDOM % 5 + 1)) # 添加随机延时 if curl -sLo \u0026#34;$download_dir/$filename\u0026#34; \u0026#34;$download_url\u0026#34;; then echo \u0026#34;已下载最新版文件 for $repo_url: $filename\u0026#34; # 下载完成后替换本文件版本号 sed -i \u0026#34;s,${repo_url//\\//\\\\/}:${local_tag//\\//\\\\/},${repo_url//\\//\\\\/}:${remote_tag//\\//\\\\/},\u0026#34; \u0026#34;$0\u0026#34; else echo \u0026#34;curl下载失败，转为wget下载\u0026#34; # 使用wget下载 sleep $((RANDOM % 5 + 1)) # 添加随机延时 if wget -P \u0026#34;$download_dir\u0026#34; \u0026#34;$download_url\u0026#34;; then echo \u0026#34;已下载最新版文件 for $repo_url: $filename\u0026#34; # 下载完成后替换本文件版本号 sed -i \u0026#34;s,${repo_url//\\//\\\\/}:${local_tag//\\//\\\\/},${repo_url//\\//\\\\/}:${remote_tag//\\//\\\\/},\u0026#34; \u0026#34;$0\u0026#34; else echo \u0026#34;wget下载失败\u0026#34; fi fi fi done ","date":"2024-12-30T13:00:00+08:00","permalink":"https://97xiami.github.io/p/shell%E4%B8%8B%E8%BD%BDgithub%E7%9A%84release/","title":"Shell下载GitHub的Release"},{"content":" 隐藏资源管理器的七个文件夹 显示netplwiz中的自动登录 自带输入法增加小鹤双拼 RDP 开启 60 帧 删除 Program 启动项 删除链接不同网络时提示的网络 12345 等等 允许挂载 http 的 WebDAV 隐藏资源管理器的七个文件夹 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{0ddd015d-b06c-45d5-8c4c-f59713854639}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{31C0DD25-9439-4F12-BF41-7FF4EDA38722}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{35286a68-3c57-41a1-bbb1-0eae73d76c95}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{7d83ee9b-2244-4e70-b1f5-5393042af1e4}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{a0c69a99-21c8-4671-8703-7934162fcf1d}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{f42ee2d3-909f-4907-8871-4c22fc0bf756}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{0ddd015d-b06c-45d5-8c4c-f59713854639}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{31C0DD25-9439-4F12-BF41-7FF4EDA38722}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{35286a68-3c57-41a1-bbb1-0eae73d76c95}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{7d83ee9b-2244-4e70-b1f5-5393042af1e4}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{a0c69a99-21c8-4671-8703-7934162fcf1d}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{B4BFCC3A-DB2C-424C-B029-7FE99A87C641}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Explorer\\FolderDescriptions\\{f42ee2d3-909f-4907-8871-4c22fc0bf756}\\PropertyBag] \u0026#34;ThisPCPolicy\u0026#34;=\u0026#34;Hide\u0026#34; 显示netplwiz中的自动登录 1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\PasswordLess\\Device] \u0026#34;DevicePasswordLessBuildVersion\u0026#34;=dword:00000000 自带输入法增加小鹤双拼 1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_CURRENT_USER\\Software\\Microsoft\\InputMethod\\Settings\\CHS] \u0026#34;UserDefinedDoublePinyinScheme0\u0026#34;=\u0026#34;小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt\u0026#34; RDP 开启 60 帧 1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations] \u0026#34;DWMFRAMEINTERVAL\u0026#34;=dword:0000000f 删除 Program 启动项 1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SOFTWARE\\WOW6432Node\\Microsoft\\Windows\\CurrentVersion\\Run] \u0026#34;TeamsMachineInstaller\u0026#34; = - 删除链接不同网络时提示的网络 12345 等等 1 2 3 Windows Registry Editor Version 5.00 [-HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\NetworkList\\Profiles] 允许挂载 http 的 WebDAV 1 2 3 4 Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\WebClient\\Parameters] \u0026#34;BasicAuthLevel\u0026#34;=dword:00000002 ","date":"2024-12-30T13:00:00+08:00","permalink":"https://97xiami.github.io/p/windows%E6%B3%A8%E5%86%8C%E8%A1%A8%E9%85%8D%E7%BD%AE/","title":"Windows注册表配置"},{"content":"阿里 dns-https\n","date":"2024-12-29T17:00:00+08:00","permalink":"https://97xiami.github.io/p/ios-%E6%8F%8F%E8%BF%B0%E6%96%87%E4%BB%B6/","title":"IOS 描述文件"},{"content":" awk du grep journalctl sed sort ss tar vim awk 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 # 用`:`分割并打印`filename`第二列和行号 # `$0`表示整行，`$1`表示第一列 # `-F`指定分割符，默认空格 # `[,;]`指定分割符为`,`或`;` awk -F \u0026#39;:\u0026#39; \u0026#39;{print NR, $2}\u0026#39; filename # 打印第二列为`100`的行 # 支持`\u0026gt;`,`\u0026gt;=`,`==`,`\u0026lt;=`,\u0026#39;\u0026lt;\u0026#39;,\u0026#39;!=\u0026#39; awk \u0026#39;$2 == 100\u0026#39; filename # 正则表达式打印包含`text`行,`!~`不包含 awk \u0026#39;$1 ~ /text/ {print $0}\u0026#39; filename # 打印第一列等于 \u0026#34;text\u0026#34; 且第二列大于 20 的行 # `||`或者 awk \u0026#39;$1 == \u0026#34;text\u0026#34; \u0026amp;\u0026amp; $2 \u0026gt; 100 {print $0}\u0026#39; filename # 打印第一列不是`text`的行 awk \u0026#39;!($1 == \u0026#34;apple\u0026#34;) {print $0}\u0026#39; filename du 1 2 3 # 只显示`test`文件夹大小，不会打印test的所有子文件 du -sh test # `-a`显示每个文件大小，`--max-depth=1`只显示一级目录 grep 1 2 # `-o`表示只显示匹配内容 grep -o journalctl 1 2 # 获取`sshd`两天内的日志 journalctl --since \u0026#34;2 day ago\u0026#34; -u sshd sed 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 打印`filename`的第一行 sed -n \u0026#34;1p\u0026#34; filename # 删除`text.txt`中的空白行 sed -i \u0026#39;/^$/d\u0026#39; filename # 在第三行前插入`text` sed -i \u0026#39;3i\\text\u0026#39; filename # 在第三行后插入`text` sed -i \u0026#39;3a\\text\u0026#39; filename # 将第三行替换为`text` sed -i \u0026#39;3c\\text\u0026#39; filename sort 1 2 3 4 5 6 7 8 9 10 11 12 13 14 # 默认按字母顺序abcde排序 # `-n`按数字12345排序 # `-r`倒序 # `-f`忽略大小写 # `-u`去除相同行 sort filename # 合并`filename`中内容相同的行，输出为`filename` sort -u filename -o filename # `ip.txt`每行一个IP地址，下面的命令可以将IP地址按从小到大排序 # `-t`指定分割符 # `-k1`表示分割后第一列，`1n`表示从第一个列开始数字排序 sort -u ip.txt -o ip.txt -t \u0026#39;.\u0026#39; -k1,1n -k2,2n -k3,3n -k4,4n ss 1 2 3 # 查看`22`端口状态 ss -tulpn | grep 22 # `-t`表示tcp，`-u`表示udp，`-l`显示所有，`-p`显示进程和pid，`-n`直接显示ip和端口 tar 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 # `gzip`用`-z`，`bzip2`用`-j` # 压缩`test`目录 tar -cvf test.tar test # 解压到`test`目录下 tar -xvf test.tar -C test # 查看`test.tar` tar -tvf test.tar # 将`filename`添加到`test.tar` tar -rvf test.tar filename # 删除`test.tar`中的`filename` tar --delete -f test.tar filename vim 在指定列插入文本，比如#注释 选定列位置后按Ctrl + v，然后上下移动光标选定要插入的行 按Shift + i，然后输入要插入的文本之后按Esc\n1 2 3 4 5 6 7 8 # 将所有`0 123`替换为`4 5 6` # `%`表示查找所有行，`g`表示替换所有匹配，`\\s`表示匹配空格，替换几个空格就输入几个空格 :%s/0\\s123\\s/4 5 6/g # 搜索后，`n`下一个，`N`上一个 # 文件路径不存在时创建文件夹 :!mkdir -p %:h ","date":"2024-12-29T17:00:00+08:00","permalink":"https://97xiami.github.io/p/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Linux常用命令"},{"content":"备份本机所有Docker镜像 1 2 3 4 5 6 7 #!/bin/bash IMAGES=$(docker images --format \u0026#34;{{.Repository}}:{{.Tag}}\u0026#34;) for IMAGE in $IMAGES; do IMAGE_NAME=$(echo \u0026#34;$IMAGE\u0026#34; | sed \u0026#39;s/:/_/g\u0026#39; | sed \u0026#39;s/\\//-/g\u0026#39;) docker save -o \u0026#34;${IMAGE_NAME}.tar\u0026#34; \u0026#34;$IMAGE\u0026#34; done 还原当前目录下所有Docker镜像 1 2 3 4 5 6 #!/bin/bash IMAGES=$(ls *.tar) for IMAGE in $IMAGES; do docker load -i $IMAGE done ","date":"2024-12-28T18:00:00+08:00","permalink":"https://97xiami.github.io/p/%E5%A4%87%E4%BB%BDdocker%E9%95%9C%E5%83%8F/","title":"备份Docker镜像"},{"content":"配置/etc/docker/daemon.json禁用iptables 1 2 3 { \u0026#34;iptables\u0026#34;: false } 自定义docker虚拟网卡 自行修改为喜欢的ip段和网卡名称， mynet是docker容器使用时用的名称， user0是宿主机执行ip addr显示的网卡名称， 因为容器默认创建的网卡名都是br-xxxxxxxx，所以要指定名称\n1 docker network create mynet --driver bridge --subnet 172.10.0.0/16 --gateway 172.10.0.1 -o com.docker.network.bridge.name=user0 docker-compose.yml配置\n1 2 3 4 5 6 7 8 9 10 services: nginx: image: nginx networks: mynet: ipv4_address: 172.10.0.2 networks: mynet: external: true nftables配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 #!/usr/bin/nft -f flush ruleset # 默认网卡docker0的IP段，一般情况不用修改 define docker0_ip = 172.17.0.0/16 # 自定义的网卡名称及IP段 define docker_if = \u0026#34;user0\u0026#34; define user0_ip = 172.10.0.0/16 table ip nat { chain PREROUTING { type nat hook prerouting priority dstnat; policy accept; # 目标地址为本地地址，则转发到DOCKER链表 fib daddr type local jump DOCKER } chain OUTPUT { type nat hook output priority dstnat; policy accept; # 目标地址为本地地址且不在127.0.0.0/8中，则转发到DOCKER链表 ip daddr != 127.0.0.0/8 fib daddr type local jump DOCKER } chain POSTROUTING { type nat hook postrouting priority srcnat; policy accept; # 伪装地址使容器能够访问外部网络 oifname != \u0026#34;docker0\u0026#34; ip saddr $docker0_ip masquerade oifname != $docker_if ip saddr $user0_ip masquerade # 伪装容器内部通讯时的地址 ip saddr $docker0_ip ip daddr $docker0_ip masquerade ip saddr $user0_ip ip daddr $user0_ip masquerade } chain DOCKER { # 放行docker网卡 iifname \u0026#34;docker0\u0026#34; return iifname $docker_if return # 设置容器端口转发 iifname != $docker_if tcp dport 80 dnat to 172.10.0.2:8080 } } table ip filter { chain INPUT { type filter hook input priority filter; policy drop; # 放行lo网卡 iifname \u0026#34;lo\u0026#34; accept # 放行默认docker0和自定义虚拟网卡 iifname \u0026#34;docker0\u0026#34; accept iifname $docker_if accept # 放行已建立连接和已关联的连接 ct state established, related accept # 放行icmp请求，限速每秒100个包 ip protocol icmp icmp type { destination-unreachable, time-exceeded, parameter-problem } limit rate 100/second accept } chain FORWARD { type filter hook forward priority filter; policy drop; # 放行docker网卡 oifname \u0026#34;docker0\u0026#34; ct state established,related accept oifname \u0026#34;docker0\u0026#34; iifname != \u0026#34;docker0\u0026#34; ip daddr $docker0_ip accept iifname \u0026#34;docker0\u0026#34; accept # 放行自定义docker虚拟网卡 oifname $docker_if ct state established,related accept oifname $docker_if iifname != $docker_if ip daddr $user0_ip accept iifname $docker_if accept } } 有需要可以将规则设置为更加详细的指定端口放行\n1 2 3 4 5 6 7 8 9 10 chain POSTROUTING { ... ip saddr 172.10.0.2 ip daddr 172.10.0.2 tcp dport 8080 masquerade ... } chain FORWARD { ... oifname $docker_if iifname != $docker_if ip daddr 172.10.0.2 tcp dport 8080 accept ... } ","date":"2024-12-28T17:00:00+08:00","permalink":"https://97xiami.github.io/p/docker%E4%BD%BF%E7%94%A8nftables/","title":"Docker使用Nftables"},{"content":"自行安装 ttyd https://github.com/tsl0922/ttyd\n添加 systemd 服务/etc/systemd/system/ttyd.service 1 2 3 4 5 6 7 8 9 10 11 12 13 14 [Unit] Description=TTYD After=syslog.target After=network.target [Service] ExecStart=/usr/bin/ttyd -W -p 2222 -c admin:password bash Type=simple Restart=always User=root Group=root [Install] WantedBy=multi-user.target 执行命令 1 2 3 systemctl daemon-reload systemctl enable ttyd systemctl start ttyd ","date":"2024-12-28T17:00:00+08:00","permalink":"https://97xiami.github.io/p/systemd-ttyd/","title":"systemd+ttyd"},{"content":" 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 \u0026#34;语法检测 syntax enable \u0026#34;历史容量 set history=100 \u0026#34;检测文件类型 filetype on \u0026#34;不同文件类型不同缩进格式 filetype plugin indent on \u0026#34;自动载入 set autoread \u0026#34;启动不显示援助 set shortmess+=c \u0026#34;取消备份 set nobackup \u0026#34;关闭交换文件 set noswapfile \u0026#34;突出显示当前列 set cursorcolumn \u0026#34;突出显示当前行 set cursorline \u0026#34;启用鼠标 set mouse=a \u0026#34;显示行列号 set ruler \u0026#34;显示正在输入的命令 set showcmd \u0026#34;显示当前模式 set showmode \u0026#34;光标距顶/底部行数 set scrolloff=3 \u0026#34;显示行号 set number \u0026#34;自动换行 set wrap \u0026#34;符号换行 set linebreak \u0026#34;高亮搜索文本 set hlsearch \u0026#34;实时搜索 set incsearch \u0026#34;忽略大小写 set ignorecase \u0026#34;一个大写 set smartcase \u0026#34;智能缩进 set smartindent \u0026#34;自动缩进 set autoindent \u0026#34;tab宽度 set tabstop=2 \u0026#34;tab转为空格 set expandtab \u0026#34;缩进宽度 set shiftwidth=2 \u0026#34;文件编码 set encoding=utf-8 \u0026#34;启用256色 set termguicolors \u0026#34;显示状态栏 set laststatus=2 \u0026#34;括号配对 set showmatch \u0026#34;保留撤销历史 set undofile \u0026#34;撤销历史文件位置 set undodir=/home \u0026#34;命令补全 set wildmenu \u0026#34;显示所有命令，再次tab切换 set wildmode=longest:full,full \u0026#34;不兼容vi set nocompatible \u0026#34;智能补全 set completeopt=longest,menu \u0026#34;backspace键无法删除 set backspace=indent,eol,start ","date":"2024-12-22T15:57:00+08:00","permalink":"https://97xiami.github.io/p/vim%E9%85%8D%E7%BD%AE/","title":"vim配置"},{"content":" 禁用 reflector 配置中科大镜像源 同步时间 转换磁盘类型为 GPT 分区 格式化分区 挂载分区 安装基础包 生成 fstab 文件 chroot 进/mnt 设置时区并写入硬件 设置 local 本地化 设置主机名和 hosts 设置 root 密码 安装 CPU 微码 安装引导程序 安装完成，重启 重启后启动 dhcpcd 联网 配置 swapfile 安装 Intel 集显驱动 安装 smartmontools 查看硬盘信息 禁用 reflector 1 systemctl stop reflector 配置中科大镜像源 1 echo \u0026#34;Server = https://mirrors.ustc.edu.cn/archlinux/$repo/os/$arch\u0026#34; \u0026gt; /etc/pacman.d/mirrorlist 同步时间 1 2 3 timedatectl set-ntp true # 开启ntp时间同步 timedatectl set-timezone PRC # 设置时区为中国 timedatectl status # 查看时间 转换磁盘类型为 GPT 1 2 3 4 5 lsblk # 显示分区信息 parted /dev/nvme0n1 # 执行parted，进行分区操作 (parted)mktable # 输入mktable (parted)New disk lebel type? # 输入gpt，如果有数据会有Warining，输入yes (parted)quit # 输入quit退出 分区 1 2 3 4 cfdisk /dev/nvme0n1 # 使用cfdisk图形化分区 # EFI分区的Size Type选择EFI System，大小1G就行 # 其他分区用默认的Linux filesystem # 分区完成后选择Write回车，输入yes写入分区信息；选择Quit退出 格式化分区 1 2 mkfs.vfat /dev/nvme0n1p1 # 格式化EFI分区 mkfs.ext4 /dev/nvme0n1p2 # 格式化其他分区为EXT4格式 挂载分区 1 2 3 mount /dev/nvme0n1p2 /mnt # 先挂载根分区 mkdir /mnt/efi # 创建efi目录 mount /dev/nvme0n1p1 /mnt/efi # 挂载efi分区 安装基础包 1 pacstrap /mnt base linux-lts linux-lts-headers linux-firmware-intel linux-firmware-whence dhcpcd vim bash-completion # 这里使用lts内核，有无线网卡加上iwd 生成 fstab 文件 1 genfstab -U /mnt \u0026gt;\u0026gt; /mnt/etc/fstab chroot 进/mnt 1 arch-chroot /mnt 设置时区并写入硬件 1 2 ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime # 创建Shanghai时区的软链接 hwclock --systohc # 时间信息写入硬件 设置 local 本地化 1 2 3 4 echo \u0026#34;en_US.UTF-8 UTF-8\u0026#34; \u0026gt;\u0026gt; /etc/locale.gen echo \u0026#34;zh_CN.UTF-8 UTF-8\u0026#34; \u0026gt;\u0026gt; /etc/locale.gen locale-gen echo \u0026#39;LANG=en_US.UTF-8\u0026#39; \u0026gt; /etc/locale.conf 设置主机名和 hosts 1 2 3 4 echo \u0026#34;arch\u0026#34; \u0026gt; /etc/hostname echo \u0026#34;127.0.0.1 localhost\u0026#34; \u0026gt;\u0026gt; /etc/hosts echo \u0026#34;::1 localhost\u0026#34; \u0026gt;\u0026gt; /etc/hosts echo \u0026#34;127.0.1.1 arch\u0026#34; \u0026gt;\u0026gt; /etc/hosts 设置 root 密码 1 passwd root 安装 CPU 微码 1 pacman -S intel-ucode 安装引导程序 1 2 3 4 pacman -S grub efibootmgr # grub是启动引导器，efibootmgr被 grub 脚本用来将启动项写入 NVRAM。 grub-install --target=x86_64-efi --efi-directory=/efi --bootloader-id=GRUB # 配置grub信息 sed -i \u0026#34;s/loglevel=3 quiet/loglevel=5 nowatchdog quiet/g\u0026#34; /etc/default/grub # loglevel改为5是为了更方便排错，nowatchdog可以加快开关机速度 grub-mkconfig -o /boot/grub/grub.cfg # 将grub配置写入 安装完成，重启 1 2 3 exit # 退回安装环境 umount -R /mnt # 卸载新分区 reboot # 重启 重启后启动 dhcpcd 联网 1 2 systemctl enable dhcpcd ststemctl start dhcpcd 配置 swapfile 1 2 3 4 5 dd if=/dev/zero of=/swapfile bs=1M count=2048 status=progress # 创建2G的交换空间 大小根据需要自定 chmod 600 /swapfile # 设置正确的权限 mkswap /swapfile # 格式化swap文件 swapon /swapfile # 启用swap文件 echo \u0026#34;/swapfile none swap defaults 0 0\u0026#34; \u0026gt;\u0026gt; /etc/fstab # 将swapfile写入fstab开机自动挂载 安装 Intel 集显驱动 1 pacman -S mesa 安装 smartmontools 查看硬盘信息 1 pacman -S smartmontools ","date":"2024-12-22T14:57:00+08:00","permalink":"https://97xiami.github.io/p/r86s%E5%AE%89%E8%A3%85arch-linux/","title":"R86S安装Arch Linux"}]